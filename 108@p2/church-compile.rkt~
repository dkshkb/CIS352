#lang racket

;; Project 2: A Church encoding compiler that translates Scheme to the
;; Lambda-calculus

(provide church-compile
         ; provided conversions:
         church->nat
         church->bool
         church->listof)

;; Input language:
;
; e ::= (letrec ([x (lambda (x ...) e)]) e)
;     | (let ([x e] ...) e)
;     | (let* ([x e] ...) e)
;     | (lambda (x ...) e)
;     | (e e ...)    
;     | x  
;     | (and e ...) | (or e ...)
;     | (if e e e)
;     | (prim e) | (prim e e)
;     | datum
; datum ::= nat | (quote ()) | #t | #f 
; nat ::= 0 | 1 | 2 | ... 
; x is a symbol
; prim is a primitive operation in list prims
; The following are *extra credit*: -, =, sub1  
(define prims '(+ * - = add1 sub1 cons car cdr null? not zero?))

; This input language has semantics identical to Scheme / Racket, except:
;   + You will not be provided code that yields any kind of error in Racket
;   + You do not need to treat non-boolean values as #t at if, and, or forms
;   + primitive operations are either strictly unary (add1 sub1 null? zero? not car cdr), 
;                                           or binary (+ - * = cons)
;   + There will be no variadic functions or applications---but any fixed arity is allowed

;; Output language:

; e ::= (lambda (x) e)
;     | (e e)
;     | x
;
; also as interpreted by Racket

;; Using the following decoding functions:

; A church-encoded nat is a function taking an f, and x, returning (f^n x)
(define (church->nat c-nat)
  ((c-nat add1) 0))

; A church-encoded bool is a function taking a true-thunk and false-thunk,
;   returning (true-thunk) when true, and (false-thunk) when false
(define (church->bool c-bool)
  ((c-bool (lambda (_) #t)) (lambda (_) #f)))

; A church-encoded cons-cell is a function taking a when-cons callback, and a when-null callback (thunk),
;   returning when-cons applied on the car and cdr elements
; A church-encoded cons-cell is a function taking a when-cons callback, and a when-null callback (thunk),
;   returning the when-null thunk, applied on a dummy value (arbitrary value that will be thrown away)
(define ((church->listof T) c-lst)
  ; when it's a pair, convert the element with T, and the tail with (church->listof T)
  ((c-lst (lambda (a) (lambda (b) (cons (T a) ((church->listof T) b)))))
   ; when it's null, return Racket's null
   (lambda (_) '())))


;; Write your church-compiling code below:


(define (mk-number n)
  (define (h n)
    (match n
      [0 'x]
      [n `(f ,(h (- n 1)))]))
  `(lambda (f) (lambda (x) ,(h n))))
    
; churchify recursively walks the AST and converts each expression in the input language (defined above)
;   to an equivalent (when converted back via each church->XYZ) expression in the output language (defined above)
(define (churchify e)
  (match e
    [(? number? n) (mk-number n)]
    [`(let ,pairs ,e-body)
     (if (empty? pairs) (churchify e-body)
         (churchify `(let ,(cdr pairs) ( (lambda (,(first (car pairs))) ,(churchify e-body)) ,(churchify (second (car pairs)))))))]
    [`(let* ,pairs ,e-body) (churchify `(let ,(reverse pairs) ,e-body))]
    [`(+ ,n0 ,n1) `(lambda (f) (lambda (x) ((,(churchify n0) f) ((,(churchify n1) f) x))))]
    [`(add1 ,n) `(lambda (f) (lambda (x) (f ((,(churchify n) f) x))))]
    [`(* ,n0 ,n1) `(lambda (f) (lambda (x) ((,(churchify n0) (,(churchify n1) f)) x)))] 
    [`#t `(lambda (t) (lambda (f) (t (lambda (x) x))))]
    [`#f `(lambda (t) (lambda (f) (f (lambda (x) x))))]
    [`(if ,g ,t ,f) `((,(churchify g)
                       (lambda (_) ,(churchify t)))
                      (lambda (_) ,(churchify f)))]
    [`'() `(lambda (when-cons) (lambda (when-null) (when-null (lambda (x) x))))]
    [`(cons ,a ,b) `(lambda (when-cons) (lambda (when-null) ((when-cons ,(churchify a)) ,(churchify b))))]
    [`(null? ,list) `((,(churchify list)
                       (lambda (_) (lambda (_) ,(churchify '#t))))
                      (lambda (_) ,(churchify '#f)))] 
    [`(car ,list) `((,(churchify list)
                     (lambda (x) (lambda (_) x)))
                    (lambda (_) ,(churchify '#f)))]
    [`(cdr ,list) `((,(churchify list)
                     (lambda (_) (lambda (x) x)))
                    (lambda (_) ,(churchify '#f)))]
    [`(len ,list) 'todo]
    [`(lambda ,arg ,body)
     (if (empty? arg) (churchify body)
         `(lambda (,(car arg)) ,(churchify `(lambda ,(cdr arg) ,(churchify body)))))]         
    [`(,f . ,args) #:when (not (empty? args))
     (if (empty? (cdr args)) `(,f ,(churchify (car args)))
         (churchify `( (,f ,(churchify (car args))) . ,(cdr args))))]
    [_ e]))

; Takes a whole program in the input language, and converts it into an equivalent program in lambda-calc
(define (church-compile program)
  ; Define primitive operations and needed helpers using a top-level let form?
 #| (define todo `(lambda (x) x))
  (churchify
   `(let ([add1 ,todo]
          [+ ,todo]
          [* ,todo]
          [zero? ,todo])
      ,program))) |#
  (churchify program))


;; For testing (church-compile '(+ 1 (+ 2 (+ 3 3))))